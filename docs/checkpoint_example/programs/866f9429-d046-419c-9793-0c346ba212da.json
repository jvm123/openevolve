{"id": "866f9429-d046-419c-9793-0c346ba212da", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.995  # Slower initial cooling for better exploration\n    min_temperature = 1e-3  # Introduce a minimum temperature to prevent early stopping\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Adaptive perturbation based on temperature\n        perturbation_scale = 0.5 * temperature  # Larger initial exploration\n        new_x = current_x + np.random.normal(0, perturbation_scale)\n        new_y = current_y + np.random.normal(0, perturbation_scale)\n        \n        # Ensure new_x and new_y remain within bounds\n        new_x = np.clip(new_x, bounds[0], bounds[1])\n        new_y = np.clip(new_y, bounds[0], bounds[1])\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Implement an adaptive restart mechanism\n        # Trigger restart if no improvement in last 150 iterations\n        if _ > 0 and _ % 150 == 0 and best_value >= current_value:\n            if np.random.rand() > 0.5:\n                # Random restart\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n            else:\n                # Restart based on best found so far\n                current_x = best_x + np.random.normal(0, 0.1)\n                current_y = best_y + np.random.normal(0, 0.1)\n            current_value = evaluate_function(current_x, current_y)\n        \n        # Adaptive cooling based on progress\n        if new_value < best_value - 0.1:  # Significant improvement\n            cooling_rate = max(0.99, cooling_rate)  # Slow down cooling\n        temperature = max(temperature * cooling_rate, min_temperature)\n\n        # Early stopping if solution converges\n        if temperature == min_temperature and abs(best_value - current_value) < 1e-6:\n            break\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "d5a8d81c-17fb-4052-97c3-34ed292ddbb1", "generation": 6, "timestamp": 1747684623.4527283, "metrics": {"runs_successfully": 1.0, "value": -0.9280831613538908, "distance": 6.0561874862290415, "value_score": 0.5187789526700711, "distance_score": 0.19658514227827528, "overall_score": 0.49404858285710507, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4702429142855252, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'cooling_rate = 0.98  # Faster cooling to allow better convergence' to 'cooling_rate = 0.995  # Slower initial cooling for better exploration'\nChange 2: Replace 2 lines with 2 lines\nChange 3: Replace 7 lines with 12 lines\nChange 4: Replace temperature = max(temperature * cooling_rate, min_temperature) with 8 lines", "parent_metrics": {"runs_successfully": 1.0, "value": 0.6053483184137962, "distance": 6.03703455848181, "value_score": 0.3416979444050435, "distance_score": 0.2282103926525655, "overall_score": 0.15469637688775917, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.3734818844387957, "success_rate": 1.0}}}