{"id": "81d6976c-e7cc-4e18-826b-62dafdbc7d8e", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A robust global optimization algorithm combining multi-start, simulated annealing, and random restarts.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Multi-start: run several independent simulated annealing searches\n    n_starts = 20  # Further increased for even better exploration\n    best_x, best_y, best_value = None, None, np.inf\n\n    for start in range(n_starts):\n        # Initialize with a random point\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        local_best_x, local_best_y, local_best_value = current_x, current_y, current_value\n\n        temperature = 2.5  # Slightly higher starting temperature\n        cooling_rate = 0.98  # Slower cooling to maintain higher temperature longer\n        min_temperature = 1e-4\n\n        no_improve_count = 0\n        last_improve_iter = 0\n        max_no_improve = iterations // 8  # Trigger restart if stuck\n\n        for i in range(iterations):\n            # Generate a new candidate point by adding a scaled perturbation\n            perturbation_scale = max(0.3 * temperature, 0.03)  # Further refined for better balance\n            new_x = current_x + np.random.normal(0, perturbation_scale)\n            new_y = current_y + np.random.normal(0, perturbation_scale)\n            # Ensure inside bounds\n            new_x = np.clip(new_x, bounds[0], bounds[1])\n            new_y = np.clip(new_y, bounds[0], bounds[1])\n            new_value = evaluate_function(new_x, new_y)\n\n            if new_value < current_value:\n                accept = True\n            else:\n                accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n            \n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n\n            if current_value < local_best_value:\n                local_best_x, local_best_y, local_best_value = current_x, current_y, current_value\n                no_improve_count = 0\n                last_improve_iter = i\n            else:\n                no_improve_count += 1\n\n            # Random restart if no improvement for several iterations\n            # Dynamic restart based on improvement rate\n            if no_improve_count > max_no_improve or (i - last_improve_iter) > iterations // (3 * n_starts):\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                no_improve_count = 0\n\n            temperature = max(temperature * cooling_rate, min_temperature)\n\n        # Update best found across all starts\n        if local_best_value < best_value:\n            best_x, best_y, best_value = local_best_x, local_best_y, local_best_value\n\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "df745310-83ff-4a2f-b5c6-bb524df03055", "generation": 5, "timestamp": 1747683837.36438, "metrics": {"runs_successfully": 1.0, "value": -1.518685102621792, "distance": 1.7090527885239075, "value_score": 0.6307895053870993, "distance_score": 0.369132710974183, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'n_starts = 10  # Increased for better exploration' to 'n_starts = 20  # Further increased for even better exploration'\nChange 2: 'for i in range(iterations // n_starts):' to 'for i in range(iterations):'\nChange 3: 'perturbation_scale = max(0.5 * temperature, 0.05)  # Adjusted minimum scale' to 'perturbation_scale = max(0.3 * temperature, 0.03)  # Further refined for better balance'\nChange 4: 'cooling_rate = 0.99  # Adjusted for smoother cooling' to 'cooling_rate = 0.98  # Slower cooling to maintain higher temperature longer'\nChange 5: 'if no_improve_count > max_no_improve or (i - last_improve_iter) > iterations // (2 * n_starts):' to 'if no_improve_count > max_no_improve or (i - last_improve_iter) > iterations // (3 * n_starts):'", "parent_metrics": {"runs_successfully": 1.0, "value": -1.5007780014193184, "distance": 1.7924826056410745, "value_score": 0.6237439362017807, "distance_score": 0.3581042897026133, "overall_score": 0.5}}}