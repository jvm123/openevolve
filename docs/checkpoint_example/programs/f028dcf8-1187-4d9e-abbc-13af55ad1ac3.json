{"id": "f028dcf8-1187-4d9e-abbc-13af55ad1ac3", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.99  # Adjusted initial cooling rate for faster convergence\n    min_temperature = 1e-4  # Lower minimum temperature to allow finer search near potential minima\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        perturbation_scale = max(0.2 * temperature, 0.01)  # Increased initial perturbation scale for better exploration\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Adaptive cooling rate adjustment based on lack of improvement\n        if _ % 50 == 0 and current_value >= best_value:\n            cooling_rate *= 0.95  # Decrease cooling rate to enhance exploration\n\n        # Enhanced restart mechanism to escape local minima\n        if _ % 200 == 0 and current_value >= best_value:\n            current_x = np.random.uniform(bounds[0], bounds[1])\n            current_y = np.random.uniform(bounds[0], bounds[1])\n            current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "afac1ee8-bea7-496c-b102-c197942c8bfa", "generation": 6, "timestamp": 1747684817.1098888, "metrics": {"runs_successfully": 1.0, "value": -1.1540861810814285, "distance": 2.310317787008159, "value_score": 0.4335868562845074, "distance_score": 0.2109735806742769, "overall_score": 0.4846888375945975, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.42344418797298744, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'cooling_rate = 0.995  # Slightly slower cooling for more exploration' to 'cooling_rate = 0.99  # Adjusted initial cooling rate for faster convergence'\nChange 2: 'min_temperature = 1e-3  # Introduce a minimum temperature to prevent early stopping' to 'min_temperature = 1e-4  # Lower minimum temperature to allow finer search near potential minima'\nChange 3: 'perturbation_scale = max(0.1 * temperature, 0.01)  # Scale perturbation with temperature' to 'perturbation_scale = max(0.2 * temperature, 0.01)  # Increased initial perturbation scale for better exploration'\nChange 4: Replace 2 lines with 6 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.3330121050816872, "distance": 5.38642309351845, "value_score": 0.41975033337898615, "distance_score": 0.25910925725707623, "overall_score": 0.16591659544090293, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4295829772045145, "success_rate": 1.0}}}