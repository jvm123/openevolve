{"id": "e9301cf9-0400-4cd3-ae96-5faa712febab", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y, best_value = None, None, float('inf')\n    n_starts = 10  # Increase number of random restarts\n\n    for _ in range(n_starts):\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        \n        temperature = 1.0\n        cooling_rate = 0.999  # Adjust cooling rate for slower cooling\n\n        for i in range(iterations):\n            # Adaptive perturbation size based on temperature\n            # Allow larger perturbations initially\n            perturbation_size = max(0.1, temperature / 1.5)\n            new_x = current_x + np.random.uniform(-perturbation_size, perturbation_size)\n            new_y = current_y + np.random.uniform(-perturbation_size, perturbation_size)\n            new_value = evaluate_function(new_x, new_y)\n\n            # Calculate acceptance probability\n            if new_value < current_value:\n                accept = True\n            else:\n                accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n            \n            # Accept the new solution\n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n\n            # Update the best solution found\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n\n            # Dynamic cooling schedule\n            temperature *= cooling_rate * (1 - (i / iterations))\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "706d13f2-4663-46f6-93b6-78fcf043b2db", "generation": 3, "timestamp": 1747684147.5321305, "metrics": {"runs_successfully": 1.0, "value": -1.5186816714723967, "distance": 1.7099098629719598, "value_score": 0.6307881401514926, "distance_score": 0.3690159638384796, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'n_starts = 5  # Number of random restarts' to 'n_starts = 10  # Increase number of random restarts'\nChange 2: 'cooling_rate = 0.995' to 'cooling_rate = 0.999  # Adjust cooling rate for slower cooling'\nChange 3: Replace perturbation_size = max(0.1, temperature / 2.0) with 2 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.4204747531363051, "distance": 5.192335910281548, "value_score": 0.5939457760826873, "distance_score": 0.22030065048037717, "overall_score": 0.18449153215874511, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.5224576607937255, "success_rate": 1.0}}}