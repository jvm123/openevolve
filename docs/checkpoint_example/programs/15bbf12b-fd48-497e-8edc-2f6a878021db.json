{"id": "15bbf12b-fd48-497e-8edc-2f6a878021db", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.995  # Slightly faster cooling rate to allow more exploration initially\n    min_temperature = 1e-4  # Allow for a lower minimum temperature for finer search\n    adaptive_cooling_threshold = 200  # Introduce a threshold for adaptive cooling\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Adaptive perturbation based on recent improvements\n        # Dynamic perturbation scale based on distance to the best-known solution\n        improvement_factor = max(0.1, min(1.0, 1.0 / (1.0 + np.abs(best_value - current_value))))\n        perturbation_scale = max(0.1 * improvement_factor * np.linalg.norm([current_x - best_x, current_y - best_y]), 0.01)\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate dynamic acceptance probability\n        accept_probability = np.exp((current_value - new_value) / (temperature * (1 + 0.01 * _)))\n        if new_value < current_value or accept_probability > np.random.rand():\n            accept = True\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Enhanced restart mechanism\n        if _ > 0 and _ % adaptive_cooling_threshold == 0:\n            if best_value >= current_value:\n                if all(evaluate_function(current_x + dx, current_y + dy) >= current_value for dx, dy in [(-0.1, 0), (0.1, 0), (0, -0.1), (0, 0.1)]):\n                    # Restart with a focus on unexplored regions\n                    current_x = best_x + np.random.uniform(-1, 1)\n                    current_y = best_y + np.random.uniform(-1, 1)\n                    current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "ce21b5d0-3f22-435a-8b44-e20416b9d464", "generation": 5, "timestamp": 1747684600.8558173, "metrics": {"runs_successfully": 1.0, "value": -1.355661110580116, "distance": 1.8118133600409143, "value_score": 0.5719714902251072, "distance_score": 0.35564238160723766, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'cooling_rate = 0.999  # Use a slightly slower cooling rate initially' to 'cooling_rate = 0.995  # Slightly faster cooling rate to allow more exploration initially'\nChange 2: Replace perturbation_scale = max(0.1 * np.exp(-_ / 100) * np.linalg.norm([current_x - best_x, current_y - best_y]), 0.01) with 2 lines\nChange 3: Replace 5 lines with 4 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.634261755501169, "distance": 4.743031487484652, "value_score": 0.30296247703453116, "distance_score": 0.20122546018725854, "overall_score": 0.1484290248553793, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.34214512427689625, "success_rate": 1.0}}}