{"id": "b25f9697-371b-440f-b54c-c7b33fee9955", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.995  # Slightly slower cooling for more exploration\n    min_temperature = 1e-3  # Introduce a minimum temperature to prevent early stopping\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Adaptive perturbation based on recent improvements\n        perturbation_scale = max(0.1 * temperature * (1 if _ % 50 == 0 else 0.5), 0.01)\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Implement a restart mechanism if no improvement is found in a certain number of iterations\n        # Intelligent restart mechanism\n        if _ > 0 and _ % 100 == 0 and best_value >= current_value:\n            if all(evaluate_function(current_x + dx, current_y + dy) >= current_value for dx, dy in [(-0.1, 0), (0.1, 0), (0, -0.1), (0, 0.1)]):\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\n# Parallel exploration with multiple independent searches\ndef run_search(num_processes=5):\n    results = [search_algorithm() for _ in range(num_processes)]\n    # Return the best result found across all processes\n    return min(results, key=lambda res: res[2])\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "815b0c81-0ee6-46d2-ac1f-4197fb7c6c29", "generation": 5, "timestamp": 1747683599.184917, "metrics": {"runs_successfully": 1.0, "value": -0.9459474254643492, "distance": 5.142933864815337, "value_score": 0.5027264874071494, "distance_score": 0.24393290238043105, "overall_score": 0.4949631526316838, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4748157631584189, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace perturbation_scale = max(0.1 * temperature * (1 if _ % 50 == 0 else 0.5), 0.01) with 2 lines\nChange 2: Replace 5 lines with 7 lines\nChange 3: Replace 3 lines with 5 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.9004838666565715, "distance": 4.643351228821235, "value_score": 0.30180144208167314, "distance_score": 0.1684000789977336, "overall_score": 0.14632017778966483, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.33160088894832396, "success_rate": 1.0}}}