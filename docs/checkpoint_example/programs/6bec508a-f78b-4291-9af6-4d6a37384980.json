{"id": "6bec508a-f78b-4291-9af6-4d6a37384980", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.995  # Slightly slower cooling for more exploration\n    min_temperature = 1e-3  # Introduce a minimum temperature to prevent early stopping\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        perturbation_scale = max(0.1 * temperature, 0.01)  # Scale perturbation with temperature\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution and update momentum\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n            # Update momentum\n            momentum = momentum_factor * momentum + np.array([new_x - current_x, new_y - current_y])\n        else:\n            # Reset momentum on rejection\n            momentum = np.array([0.0, 0.0])\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Adaptive cooling schedule\n        if current_value < best_value:\n            temperature = max(temperature * adaptive_rate, min_temperature)\n        else:\n            # Increase temperature if stuck in a local minimum\n            temperature = min(temperature * temperature_increase, 1.0)\n\n        # Improved restart mechanism\n        if _ % 200 == 0 and current_value >= best_value:\n            # Use a strategic restart by slightly perturbing the best known solution\n            current_x = best_x + np.random.uniform(-1, 1)\n            current_y = best_y + np.random.uniform(-1, 1)\n            current_value = evaluate_function(current_x, current_y)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "378c023c-827e-4016-b9de-265020c5e8dd", "generation": 4, "timestamp": 1747683613.8497512, "metrics": {"error": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 6 lines\nChange 2: Replace 2 lines with 8 lines\nChange 3: '# Accept the new solution' to '# Accept the new solution and update momentum'\nChange 4: Replace # Update the best solution found with 7 lines\nChange 5: Replace 8 lines with 13 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.8738212402463125, "distance": 2.4411503423243888, "value_score": 0.43012775956704674, "distance_score": 0.18678802902100744, "overall_score": 0.16282261288930605, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.41411306444653023, "success_rate": 1.0}}}