{"id": "587b41ec-9e19-43ef-9756-ff4ecdfa1afd", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.99\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        new_x = current_x + np.random.uniform(-0.1, 0.1)\n        new_y = current_y + np.random.uniform(-0.1, 0.1)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        temperature *= cooling_rate\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "671651af-3148-47b4-ba64-5f6df7a748f7", "generation": 1, "timestamp": 1747683308.3015606, "metrics": {"runs_successfully": 1.0, "value": 0.6790898014054345, "distance": 6.116510764280398, "value_score": 0.4380900338795069, "distance_score": 0.23743554909359196, "overall_score": 0.48681693701115636, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4340846850557817, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 27 lines with 44 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.5124300045855732, "distance": 1.7121946646425519, "value_score": 0.628310412285456, "distance_score": 0.3687050981393303, "overall_score": 0.5}}}