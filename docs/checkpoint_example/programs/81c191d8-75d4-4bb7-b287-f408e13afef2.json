{"id": "81c191d8-75d4-4bb7-b287-f408e13afef2", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Improved global function minimization using multi-start Simulated Annealing with periodic large jumps.\n    \"\"\"\n    # Multi-start strategy: try multiple different initial points\n    n_starts = 5\n    best_x, best_y, best_value = None, None, np.inf\n\n    for start in range(n_starts):\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n\n        # Annealing parameters for each run\n        temperature = 2.0\n        cooling_rate = 0.985\n        min_temperature = 1e-4\n        no_improve_counter = 0\n        best_local_x, best_local_y, best_local_value = current_x, current_y, current_value\n\n        for i in range(iterations // n_starts):\n            # Adaptive perturbation: small steps most of the time, large steps occasionally to escape local minima\n            if i % 100 == 0 and i > 0:\n                # Large random jump\n                new_x = np.random.uniform(bounds[0], bounds[1])\n                new_y = np.random.uniform(bounds[0], bounds[1])\n            else:\n                # Anneal with adaptive step size\n                step_scale = 0.2 * temperature + 0.05\n                new_x = current_x + np.random.normal(0, step_scale)\n                new_y = current_y + np.random.normal(0, step_scale)\n                new_x = np.clip(new_x, bounds[0], bounds[1])\n                new_y = np.clip(new_y, bounds[0], bounds[1])\n\n            new_value = evaluate_function(new_x, new_y)\n\n            # Accept with probability based on SA\n            if new_value < current_value:\n                accept = True\n            else:\n                delta = (current_value - new_value)\n                accept = np.exp(delta / temperature) > np.random.rand()\n\n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n                if current_value < best_local_value:\n                    best_local_x, best_local_y, best_local_value = current_x, current_y, current_value\n                    no_improve_counter = 0\n                else:\n                    no_improve_counter += 1\n            else:\n                no_improve_counter += 1\n\n            # Random re-start if stuck for a long time\n            if no_improve_counter > 80:\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                no_improve_counter = 0\n\n            temperature = max(temperature * cooling_rate, min_temperature)\n\n        # Update overall best\n        if best_local_value < best_value:\n            best_x, best_y, best_value = best_local_x, best_local_y, best_local_value\n\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "dfb9bd3c-165a-4db2-aebc-b1f319a43e81", "generation": 5, "timestamp": 1747684469.8824012, "metrics": {"runs_successfully": 1.0, "value": -1.4683318961503105, "distance": 1.828114989724455, "value_score": 0.6113709729048402, "distance_score": 0.35359241177722783, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 59 lines with 67 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.8806981423956454, "distance": 5.481650992896429, "value_score": 0.33312137366595845, "distance_score": 0.1794633008683563, "overall_score": 0.15074236289201642, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.35371181446008193, "success_rate": 1.0}}}