{"id": "c843ba2e-3257-4af0-8b9d-7efddbd7f187", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_cooling_rate = 0.98  # Adjust the initial cooling rate for more aggressive cooling\n    cooling_rate = initial_cooling_rate\n    min_temperature = 1e-4  # Lower minimum temperature to allow more exploration\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        perturbation_scale = max(0.1 * temperature, 0.01)  # Use fixed scale with Gaussian perturbation\n        new_x = current_x + np.random.normal(0, perturbation_scale)\n        new_y = current_y + np.random.normal(0, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Adaptive restart mechanism with stagnation detection\n        if _ % 50 == 0:  # Check more frequently\n            if current_value >= best_value - 1e-6:  # Check for stagnation with a small tolerance\n                restart_probability = 0.1  # Constant probability for restart to prevent being trapped\n                if np.random.rand() < restart_probability:\n                    # Random restart with a slight bias towards previous best\n                    current_x = best_x + np.random.normal(0, 0.5)\n                    current_y = best_y + np.random.normal(0, 0.5)\n                    current_value = evaluate_function(current_x, current_y)\n                # Dynamic cooling rate adjustment based on recent progress\n                cooling_rate = initial_cooling_rate * (0.8 + 0.2 * (_ / iterations))\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "8a86605a-8bc7-4c6c-a0a3-f4fdee4883bb", "generation": 6, "timestamp": 1747684561.6174774, "metrics": {"runs_successfully": 1.0, "value": -0.23625004774354164, "distance": 3.751892013383784, "value_score": 0.40830195673536496, "distance_score": 0.2099846123058371, "overall_score": 0.4815953115465941, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4079765577329701, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 3 lines with 3 lines\nChange 2: Replace 3 lines with 3 lines\nChange 3: Replace 9 lines with 10 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.9282770999302274, "distance": 6.071918133930994, "value_score": 0.47717419070153994, "distance_score": 0.20175500454188094, "overall_score": 0.48936620315669765, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4468310157834882, "success_rate": 1.0}}}