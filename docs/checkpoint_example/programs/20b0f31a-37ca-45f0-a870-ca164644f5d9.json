{"id": "20b0f31a-37ca-45f0-a870-ca164644f5d9", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_cooling_rate = 0.999\n    min_temperature = 1e-4  # Allow for a lower minimum temperature for finer search\n    adaptive_cooling_threshold = 200  # Introduce a threshold for adaptive cooling\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Adaptive perturbation based on recent improvements\n        # Dynamic perturbation scale based on distance to the best-known solution\n        perturbation_scale = max(0.1 * (1 - _ / iterations) * np.linalg.norm([current_x - best_x, current_y - best_y]) * temperature, 0.01)\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Random restart mechanism\n        if _ > 0 and _ % adaptive_cooling_threshold == 0:\n            # Enhance the random restart mechanism\n            new_x = np.random.uniform(bounds[0], bounds[1])\n            new_y = np.random.uniform(bounds[0], bounds[1])\n            new_value = evaluate_function(new_x, new_y)\n            if new_value < best_value:  # Only restart if we find a promising new point\n                current_x, current_y, current_value = new_x, new_y, new_value\n        \n        # Dynamically adjust the cooling rate\n        # Adaptive cooling based on lack of improvement\n        if current_value == best_value:  # No improvement found\n            cooling_rate = initial_cooling_rate * 0.99  # Cool faster if stuck\n        else:\n            cooling_rate = initial_cooling_rate * (0.5 + 0.5 * np.cos(np.pi * _ / iterations))\n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "d819021f-e261-4988-80e6-fa7c521f68e1", "generation": 6, "timestamp": 1747684273.820815, "metrics": {"runs_successfully": 1.0, "value": -0.07343023075030597, "distance": 4.323101623843643, "value_score": 0.4197816053736693, "distance_score": 0.20703423841625335, "overall_score": 0.16279584694981553, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4139792347490776, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'perturbation_scale = max(0.1 * (1 - _ / iterations) * np.linalg.norm([current_x - best_x, current_y - best_y]), 0.01)' to 'perturbation_scale = max(0.1 * (1 - _ / iterations) * np.linalg.norm([current_x - best_x, current_y - best_y]) * temperature, 0.01)'\nChange 2: Replace 5 lines with 7 lines\nChange 3: Replace cooling_rate = initial_cooling_rate * (0.5 + 0.5 * np.cos(np.pi * _ / iterations)) with 5 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.4204993892200068, "distance": 5.1890139004496065, "value_score": 0.4950104382850183, "distance_score": 0.2764172543253523, "overall_score": 0.49598628785372334, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.47993143926861664, "success_rate": 1.0}}}