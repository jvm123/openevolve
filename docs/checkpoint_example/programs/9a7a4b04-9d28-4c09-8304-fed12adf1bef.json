{"id": "9a7a4b04-9d28-4c09-8304-fed12adf1bef", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.98  # Faster cooling to allow better convergence\n    min_temperature = 1e-3  # Introduce a minimum temperature to prevent early stopping\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Adaptive perturbation based on recent improvements\n        perturbation_scale = 0.1 * temperature\n        new_x = current_x + np.random.normal(0, perturbation_scale)\n        new_y = current_y + np.random.normal(0, perturbation_scale)\n        \n        # Ensure new_x and new_y remain within bounds\n        new_x = np.clip(new_x, bounds[0], bounds[1])\n        new_y = np.clip(new_y, bounds[0], bounds[1])\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Implement a restart mechanism if no improvement is found in a certain number of iterations\n        # Intelligent restart mechanism\n        # Trigger restart if no improvement in last 200 iterations\n        if _ > 0 and _ % 200 == 0 and best_value >= current_value:\n            current_x = np.random.uniform(bounds[0], bounds[1])\n            current_y = np.random.uniform(bounds[0], bounds[1])\n            current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "dfb9bd3c-165a-4db2-aebc-b1f319a43e81", "generation": 5, "timestamp": 1747684745.7478921, "metrics": {"runs_successfully": 1.0, "value": -0.10208737955388059, "distance": 6.69049932218707, "value_score": 0.30636524921403024, "distance_score": 0.19783487321622836, "overall_score": 0.14863392229865735, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.3431696114932866, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: 'cooling_rate = 0.98  # Faster cooling to allow better convergence' to 'cooling_rate = 0.99  # Slower cooling to maintain higher temperature longer'\nChange 2: Replace 2 lines with 2 lines\nChange 3: 'perturbation_scale = 0.1 * temperature' to 'perturbation_scale = 0.1 * (temperature / 10)  # Scale perturbation based on relative temperature'\nChange 4: Replace 2 lines with 12 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.8806981423956454, "distance": 5.481650992896429, "value_score": 0.33312137366595845, "distance_score": 0.1794633008683563, "overall_score": 0.15074236289201642, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.35371181446008193, "success_rate": 1.0}}}