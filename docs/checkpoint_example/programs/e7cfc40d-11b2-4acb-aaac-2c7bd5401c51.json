{"id": "e7cfc40d-11b2-4acb-aaac-2c7bd5401c51", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid global optimization: multi-start simulated annealing with periodic global random restarts and adaptive step sizes.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    n_starts = 5  # Number of random restarts at the top level\n    best_x, best_y, best_value = None, None, float('inf')\n    for start in range(n_starts):\n        # Initialize with a random point for each restart\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        local_best_x, local_best_y, local_best_value = current_x, current_y, current_value\n        temperature = 2.0  # Higher initial temperature for more exploration\n        cooling_rate = 0.992  # Slower cooling for more exploration\n        min_temperature = 1e-4\n        plateau_count = 0\n        plateau_limit = max(20, iterations//20)\n        for i in range(iterations//n_starts):\n            # Adaptive perturbation: larger steps at high temperature, smaller at low\n            perturbation_scale = max(0.25 * temperature, 0.01)\n            new_x = np.clip(current_x + np.random.normal(0, perturbation_scale), bounds[0], bounds[1])\n            new_y = np.clip(current_y + np.random.normal(0, perturbation_scale), bounds[0], bounds[1])\n            new_value = evaluate_function(new_x, new_y)\n            # Metropolis criterion\n            if new_value < current_value:\n                accept = True\n            else:\n                delta = new_value - current_value\n                accept = np.exp(-delta / temperature) > np.random.rand()\n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n                plateau_count = 0\n            else:\n                plateau_count += 1\n            # Update local best\n            if current_value < local_best_value:\n                local_best_x, local_best_y, local_best_value = current_x, current_y, current_value\n            # Adaptive global jump if stuck\n            if plateau_count > plateau_limit:\n                # Large random jump to a new region\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                plateau_count = 0\n            temperature = max(temperature * cooling_rate, min_temperature)\n        # Update overall best\n        if local_best_value < best_value:\n            best_x, best_y, best_value = local_best_x, local_best_y, local_best_value\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "39d3c5b7-a779-4a2c-888b-13bc4ffc8966", "generation": 3, "timestamp": 1747683851.9200754, "metrics": {"runs_successfully": 1.0, "value": -1.4976860398899163, "distance": 1.669357558197899, "value_score": 0.6225433040073113, "distance_score": 0.3746219748376859, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 52 lines with 56 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.4470917790682061, "distance": 2.1481463061683357, "value_score": 0.4301064327373378, "distance_score": 0.2388252066022703, "overall_score": 0.4859422843246168, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.42971142162308373, "success_rate": 1.0}}}