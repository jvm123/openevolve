{"id": "600d84ab-ea0d-418b-8b02-4a00e6378024", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_temperature = 1.0\n    cooling_rate = 0.998  # Adjust the cooling rate for a more aggressive initial search\n    min_temperature = 1e-6  # Allow for even lower minimum temperature for finer search\n    adaptive_cooling_factor = 0.95  # Introduce dynamic adjustment factor for cooling rate\n    adaptive_cooling_threshold = 200  # Introduce a threshold for adaptive cooling\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Enhanced perturbation mechanism with dynamic scaling\n        perturbation_scale = max(0.1 * (1 + 0.5 * (best_value - current_value) / abs(best_value + 1e-6)), 0.01)\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Dynamic cooling schedule adjustment based on progress\n        if _ % 100 == 0:\n            if best_value < current_value:\n                cooling_rate *= adaptive_cooling_factor\n        if _ > 0 and _ % adaptive_cooling_threshold == 0:\n            if best_value >= current_value:\n                if all(evaluate_function(current_x + dx, current_y + dy) >= current_value for dx, dy in [(-0.1, 0), (0.1, 0), (0, -0.1), (0, 0.1)]):\n                    # Restart with a focus on unexplored regions\n                    current_x = best_x + np.random.uniform(-1, 1)\n                    current_y = best_y + np.random.uniform(-1, 1)\n                    current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "ce21b5d0-3f22-435a-8b44-e20416b9d464", "generation": 5, "timestamp": 1747684134.1555688, "metrics": {"runs_successfully": 1.0, "value": -1.5186772524988208, "distance": 1.7061174685288694, "value_score": 0.6307863818747458, "distance_score": 0.3695331084587512, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 4 lines\nChange 2: Replace 3 lines with 2 lines\nChange 3: Replace 2 lines with 4 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.634261755501169, "distance": 4.743031487484652, "value_score": 0.30296247703453116, "distance_score": 0.20122546018725854, "overall_score": 0.1484290248553793, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.34214512427689625, "success_rate": 1.0}}}