{"id": "873a0594-25e5-43fc-a5d7-168cc6bbbabe", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Improved global optimization using multi-start simulated annealing with random restarts.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Multi-start: run several independent annealing chains and pick the best\n    n_starts = 5\n    chain_iters = iterations // n_starts\n    global_best_x, global_best_y, global_best_value = None, None, float('inf')\n    for start in range(n_starts):\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        \n        best_x, best_y, best_value = current_x, current_y, current_value\n        temperature = 2.0  # Higher initial temperature\n        cooling_rate = 0.992  # Even slower cooling for more exploration\n        min_temperature = 1e-4\n\n        no_improve_count = 0\n        last_best_value = best_value\n\n        for i in range(chain_iters):\n            # Adaptive perturbation scale: larger at higher temperature, but never too small\n            perturbation_scale = max(0.3 * temperature, 0.02)\n            new_x = np.clip(current_x + np.random.normal(0, perturbation_scale), bounds[0], bounds[1])\n            new_y = np.clip(current_y + np.random.normal(0, perturbation_scale), bounds[0], bounds[1])\n            new_value = evaluate_function(new_x, new_y)\n\n            # Accept better or probabilistically worse\n            if new_value < current_value:\n                accept = True\n            else:\n                accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n            \n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n\n            # Update best found in this chain\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n                no_improve_count = 0\n            else:\n                no_improve_count += 1\n\n            # Adaptive random restart if stuck\n            if no_improve_count > 60 and temperature < 0.05:\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                no_improve_count = 0\n\n            temperature = max(temperature * cooling_rate, min_temperature)\n        \n        if best_value < global_best_value:\n            global_best_x, global_best_y, global_best_value = best_x, best_y, best_value\n\n    return global_best_x, global_best_y, global_best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "e86a55b6-c88c-4f87-bea5-fa91b418d3e4", "generation": 5, "timestamp": 1747684481.8550062, "metrics": {"runs_successfully": 1.0, "value": -1.5184652353561823, "distance": 1.7194022850017874, "value_score": 0.6307020333449735, "distance_score": 0.36772786634594695, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 52 lines with 64 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.1484761802416486, "distance": 3.8937782311748976, "value_score": 0.4240862097886148, "distance_score": 0.21685621318163473, "overall_score": 0.16390171796553188, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4195085898276592, "success_rate": 1.0}}}