{"id": "4a8a354e-f7a4-4081-873b-9fa1f3474ddb", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Improved global minimization using Simulated Annealing + Differential Evolution restarts.\n    \"\"\"\n    def evaluate_population(pop):\n        return np.array([evaluate_function(x, y) for x, y in pop])\n\n    # Differential Evolution parameters\n    pop_size = 8\n    F = 0.8\n    CR = 0.9\n\n    # Simulated Annealing parameters\n    temperature = 2.0\n    cooling_rate = 0.995\n    min_temperature = 1e-4\n    no_improvement_threshold = 150\n    last_improvement_iter = 0\n\n    # Random initialization for population\n    pop = np.random.uniform(bounds[0], bounds[1], size=(pop_size, 2))\n    pop_vals = evaluate_population(pop)\n    best_idx = np.argmin(pop_vals)\n    best_x, best_y, best_value = pop[best_idx][0], pop[best_idx][1], pop_vals[best_idx]\n\n    current_x, current_y = best_x, best_y\n    current_value = best_value\n\n    for i in range(iterations):\n        # Simulated Annealing step\n        perturb = max(0.2 * temperature, 0.02)\n        new_x = current_x + np.random.uniform(-perturb, perturb)\n        new_y = current_y + np.random.uniform(-perturb, perturb)\n        # Clamp to bounds\n        new_x = np.clip(new_x, bounds[0], bounds[1])\n        new_y = np.clip(new_y, bounds[0], bounds[1])\n        new_value = evaluate_function(new_x, new_y)\n        accept = False\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / (temperature+1e-8)) > np.random.rand()\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update best\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n            last_improvement_iter = i\n\n        # Differential Evolution restart if stagnation\n        if i - last_improvement_iter > no_improvement_threshold:\n            # DE step: evolve population for a few generations\n            for _ in range(7):  # a few generations\n                for j in range(pop_size):\n                    idxs = [idx for idx in range(pop_size) if idx != j]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + F*(b-c), bounds[0], bounds[1])\n                    cross = np.random.rand(2) < CR\n                    trial = np.where(cross, mutant, pop[j])\n                    trial_val = evaluate_function(trial[0], trial[1])\n                    if trial_val < pop_vals[j]:\n                        pop[j] = trial\n                        pop_vals[j] = trial_val\n            # Reset current solution to best in population\n            best_idx = np.argmin(pop_vals)\n            current_x, current_y = pop[best_idx][0], pop[best_idx][1]\n            current_value = pop_vals[best_idx]\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n            last_improvement_iter = i\n            # Also mix in a new random solution to maintain diversity\n            pop[np.argmax(pop_vals)] = np.random.uniform(bounds[0], bounds[1], 2)\n            pop_vals[np.argmax(pop_vals)] = evaluate_function(pop[np.argmax(pop_vals)][0], pop[np.argmax(pop_vals)][1])\n\n        temperature = max(temperature * cooling_rate, min_temperature)\n\n    return float(best_x), float(best_y), float(best_value)\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "cbace538-30c1-4370-8ee7-46e2dd00371c", "generation": 6, "timestamp": 1747684801.602202, "metrics": {"runs_successfully": 1.0, "value": -1.5184679820375322, "distance": 1.7146746767736392, "value_score": 0.6307031259356578, "distance_score": 0.3683682647338387, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 71 lines with 78 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.1505276454007851, "distance": 2.8298516401660767, "value_score": 0.5421676042939461, "distance_score": 0.2559468909629838, "overall_score": 0.5004169259730527, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.5020846298652628, "success_rate": 1.0}}}