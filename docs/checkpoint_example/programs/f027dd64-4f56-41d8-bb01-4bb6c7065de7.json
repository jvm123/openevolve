{"id": "f027dd64-4f56-41d8-bb01-4bb6c7065de7", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Improved global optimization using multi-start simulated annealing and basin hopping.\n    Focuses on exploration and robust escape from local minima.\n    \"\"\"\n    def random_point():\n        return np.random.uniform(bounds[0], bounds[1]), np.random.uniform(bounds[0], bounds[1])\n\n    def clipped(x):\n        return np.clip(x, bounds[0], bounds[1])\n\n    def local_minimize(x0, y0, steps=40, lr=0.02):\n        # Simple gradient descent for local refinement\n        x, y = x0, y0\n        for _ in range(steps):\n            grad_x = np.cos(x) * np.cos(y) + y * np.cos(x * y) + x/10\n            grad_y = -np.sin(x) * np.sin(y) + x * np.cos(x * y) + y/10\n            x = clipped(x - lr * grad_x)\n            y = clipped(y - lr * grad_y)\n        return x, y, evaluate_function(x, y)\n\n    n_starts = 8\n    best_x, best_y, best_value = None, None, np.inf\n\n    for start in range(n_starts):\n        # Simulated annealing per start\n        current_x, current_y = random_point()\n        current_value = evaluate_function(current_x, current_y)\n        temperature = 3.0\n        cooling_rate = 0.98\n        min_temperature = 1e-4\n        for it in range(iterations // n_starts):\n            perturbation_scale = max(0.25 * temperature, 0.05)\n            new_x = clipped(current_x + np.random.normal(0, perturbation_scale))\n            new_y = clipped(current_y + np.random.normal(0, perturbation_scale))\n            new_value = evaluate_function(new_x, new_y)\n            if new_value < current_value or np.exp((current_value - new_value) / temperature) > np.random.rand():\n                current_x, current_y, current_value = new_x, new_y, new_value\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n            temperature = max(temperature * cooling_rate, min_temperature)\n\n        # Basin hopping: after annealing, perform local descent\n        local_x, local_y, local_val = local_minimize(current_x, current_y)\n        if local_val < best_value:\n            best_x, best_y, best_value = local_x, local_y, local_val\n\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "6faffe31-1302-4428-b4dc-abfa216f23b3", "generation": 6, "timestamp": 1747683770.5722716, "metrics": {"runs_successfully": 1.0, "value": -1.491531269492436, "distance": 1.8307147542726059, "value_score": 0.6201670649980453, "distance_score": 0.35326766799467396, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace def local_minimize(x0, y0, steps=40, lr=0.02): with 12 lines\nChange 2: Replace 2 lines with 2 lines\nChange 3: Replace 2 lines with 2 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.5186743726058185, "distance": 1.7085977494900697, "value_score": 0.6307852359919973, "distance_score": 0.3691947245353296, "overall_score": 0.5}}}