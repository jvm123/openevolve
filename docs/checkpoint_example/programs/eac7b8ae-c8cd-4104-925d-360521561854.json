{"id": "eac7b8ae-c8cd-4104-925d-360521561854", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid global optimization using multi-start with simulated annealing and periodic global jumps.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Multi-start: Try several different initial points, keep the best\n    num_starts = 5\n    best_x, best_y, best_value = None, None, np.inf\n    for start in range(num_starts):\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        temperature = 2.0  # Higher initial temperature for more exploration\n        min_temperature = 1e-5\n        cooling_rate = 0.995\n        perturbation_scale_init = (bounds[1] - bounds[0]) * 0.1\n        stagnation_counter = 0\n        last_improvement = current_value\n        for i in range(iterations // num_starts):\n            # Adaptive perturbation: scale with temperature\n            perturbation_scale = max(perturbation_scale_init * temperature, 0.01)\n            new_x = current_x + np.random.normal(0, perturbation_scale)\n            new_y = current_y + np.random.normal(0, perturbation_scale)\n            # Keep within bounds\n            new_x = np.clip(new_x, bounds[0], bounds[1])\n            new_y = np.clip(new_y, bounds[0], bounds[1])\n            new_value = evaluate_function(new_x, new_y)\n            # Acceptance logic\n            if new_value < current_value:\n                accept = True\n            else:\n                accept = np.exp((current_value - new_value) / (temperature + 1e-8)) > np.random.rand()\n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n                # Stagnation detection for global jump\n                if new_value < last_improvement - 1e-6:\n                    last_improvement = new_value\n                    stagnation_counter = 0\n                else:\n                    stagnation_counter += 1\n            else:\n                stagnation_counter += 1\n            # Update best found\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n            # Global jump if stagnating\n            if stagnation_counter >= 60:\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                stagnation_counter = 0\n                last_improvement = current_value\n            # Periodic global jump (random restart) to escape deep local minima\n            if i > 0 and i % 120 == 0:\n                if np.random.rand() < 0.25:\n                    current_x = np.random.uniform(bounds[0], bounds[1])\n                    current_y = np.random.uniform(bounds[0], bounds[1])\n                    current_value = evaluate_function(current_x, current_y)\n                    stagnation_counter = 0\n                    last_improvement = current_value\n            # Cool down\n            temperature = max(temperature * cooling_rate, min_temperature)\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "c8d7f975-d28d-4d6d-9e7a-581a88a1ad10", "generation": 7, "timestamp": 1747684355.272367, "metrics": {"runs_successfully": 1.0, "value": -1.492414963630379, "distance": 1.618433327347625, "value_score": 0.6205071264825566, "distance_score": 0.38190775741957217, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 61 lines with 68 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.3292443516039463, "distance": 5.098756851702309, "value_score": 0.4305860667735226, "distance_score": 0.19629328792569578, "overall_score": 0.16344792528836447, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4172396264418222, "success_rate": 1.0}}}