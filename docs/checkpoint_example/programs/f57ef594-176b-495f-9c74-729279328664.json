{"id": "f57ef594-176b-495f-9c74-729279328664", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_cooling_rate = 0.995  # Start with a slower cooling rate\n    min_temperature = 1e-3  # Introduce a minimum temperature to prevent early stopping\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        perturbation_scale = max(0.1 * temperature, 0.01)  # Scale perturbation with temperature\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability and accept new solution\n        delta_value = new_value - current_value\n        if delta_value < 0 or np.exp(-delta_value / temperature) > np.random.rand():\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Dynamic cooling rate adjustment\n        cooling_rate = initial_cooling_rate - (_ / iterations) * 0.5  # Gradually increase cooling rate\n\n        # Restart mechanism with local search\n        if _ % 100 == 0 and current_value >= best_value:\n            # Perform a local search to fine-tune the current best solution\n            local_search_result = local_search(current_x, current_y)\n            current_x, current_y, current_value = local_search_result\n            current_x = np.random.uniform(bounds[0], bounds[1])\n            current_y = np.random.uniform(bounds[0], bounds[1])\n            current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef local_search(x, y):\n    \"\"\"Perform a simple local search using a gradient-free method like Nelder-Mead.\"\"\"\n    from scipy.optimize import minimize\n    result = minimize(lambda vars: evaluate_function(vars[0], vars[1]), [x, y], method='Nelder-Mead')\n    return result.x[0], result.x[1], result.fun\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "39d3c5b7-a779-4a2c-888b-13bc4ffc8966", "generation": 3, "timestamp": 1747683426.0542731, "metrics": {"error": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 3 lines with 3 lines\nChange 2: Replace 8 lines with 3 lines\nChange 3: Replace 3 lines with 8 lines\nChange 4: Replace def evaluate_function(x, y): with 5 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.4470917790682061, "distance": 2.1481463061683357, "value_score": 0.4301064327373378, "distance_score": 0.2388252066022703, "overall_score": 0.4859422843246168, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.42971142162308373, "success_rate": 1.0}}}