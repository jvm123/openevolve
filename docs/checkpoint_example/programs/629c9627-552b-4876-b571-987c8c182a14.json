{"id": "629c9627-552b-4876-b571-987c8c182a14", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=2000, bounds=(-5, 5), n_restarts=5):\n    \"\"\"\n    Enhanced global minimization using multi-start and adaptive simulated annealing.\n\n    Args:\n        iterations: Number of iterations per run\n        bounds: Bounds for the search space (min, max)\n        n_restarts: Number of independent restarts\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    def clip(val):\n        return np.clip(val, bounds[0], bounds[1])\n\n    overall_best_x, overall_best_y, overall_best_value = None, None, float('inf')\n    for restart in range(n_restarts):\n        # Initialize with a random point\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        best_x, best_y, best_value = current_x, current_y, current_value\n\n        temperature = 1.5\n        cooling_rate = 0.993  # Slower cooling to enhance exploration\n        min_temperature = 1e-4\n\n        no_improve_counter = 0\n        for i in range(iterations):\n            # Adaptive perturbation: larger jumps at high temperature, smaller at low\n            perturb_scale = max(0.25 * temperature, 0.01)\n            # Occasionally make a large jump to escape local minima\n            if np.random.rand() < 0.01:\n                new_x = np.random.uniform(bounds[0], bounds[1])\n                new_y = np.random.uniform(bounds[0], bounds[1])\n            else:\n                new_x = clip(current_x + np.random.normal(0, perturb_scale))\n                new_y = clip(current_y + np.random.normal(0, perturb_scale))\n            new_value = evaluate_function(new_x, new_y)\n\n            # Acceptance criterion\n            if new_value < current_value:\n                accept = True\n            else:\n                accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n\n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n                no_improve_counter = 0\n            else:\n                no_improve_counter += 1\n\n            # Occasional random restart if stuck\n            if no_improve_counter > 300:\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                no_improve_counter = 0\n\n            temperature = max(temperature * cooling_rate, min_temperature)\n\n        if best_value < overall_best_value:\n            overall_best_x, overall_best_y, overall_best_value = best_x, best_y, best_value\n\n    return overall_best_x, overall_best_y, overall_best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "f533ce2b-cb5a-43ff-9fb0-2b7eafb531bd", "generation": 5, "timestamp": 1747683917.6204822, "metrics": {"runs_successfully": 1.0, "value": -1.5186807939716778, "distance": 1.7077588241812698, "value_score": 0.6307877909996976, "distance_score": 0.3693091094633823, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 52 lines with 68 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.6030190517040648, "distance": 3.5144723081215075, "value_score": 0.42717877958304035, "distance_score": 0.23192590491212237, "overall_score": 0.4851770078446922, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.4258850392234609, "success_rate": 1.0}}}