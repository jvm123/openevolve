{"id": "88698633-0f8c-4ad9-b03d-b801167e9efc", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5), restarts=5, swarm_size=10):\n    \"\"\"\n    Hybrid Simulated Annealing with Random Restarts and Particle Swarm-inspired multi-starts.\n    The algorithm attempts to reliably find the global minimum by running multiple independent \n    simulated annealing processes (swarm) and restarting the best if progress stalls.\n\n    Args:\n        iterations: Number of iterations per swarm member\n        bounds: Bounds for the search space (min, max)\n        restarts: Number of random restarts for the best candidate\n        swarm_size: Number of independent search agents\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    def anneal_once(init_x, init_y, iterations, bounds):\n        current_x, current_y = init_x, init_y\n        current_value = evaluate_function(current_x, current_y)\n        best_x, best_y, best_value = current_x, current_y, current_value\n        temperature = 1.0\n        cooling_rate = 0.995\n        min_temperature = 1e-3\n        no_improve_count = 0\n        for i in range(iterations):\n            perturbation_scale = max(0.2 * temperature, 0.05) # More exploration\n            new_x = np.clip(current_x + np.random.uniform(-perturbation_scale, perturbation_scale), bounds[0], bounds[1])\n            new_y = np.clip(current_y + np.random.uniform(-perturbation_scale, perturbation_scale), bounds[0], bounds[1])\n            new_value = evaluate_function(new_x, new_y)\n            if new_value < current_value:\n                accept = True\n            else:\n                accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n            if accept:\n                current_x, current_y, current_value = new_x, new_y, new_value\n            if current_value < best_value:\n                best_x, best_y, best_value = current_x, current_y, current_value\n                no_improve_count = 0\n            else:\n                no_improve_count += 1\n            # If stuck for a while, jump to a new region\n            if no_improve_count > 150:\n                current_x = np.random.uniform(bounds[0], bounds[1])\n                current_y = np.random.uniform(bounds[0], bounds[1])\n                current_value = evaluate_function(current_x, current_y)\n                no_improve_count = 0\n            temperature = max(temperature * cooling_rate, min_temperature)\n        return best_x, best_y, best_value\n\n    # Swarm initialization: multiple independent searches\n    swarm = []\n    for _ in range(swarm_size):\n        start_x = np.random.uniform(bounds[0], bounds[1])\n        start_y = np.random.uniform(bounds[0], bounds[1])\n        bx, by, bv = anneal_once(start_x, start_y, iterations, bounds)\n        swarm.append((bx, by, bv))\n    # Find the best from the swarm\n    best_x, best_y, best_value = min(swarm, key=lambda t: t[2])\n\n    # Perform random restarts from the best found so far\n    for _ in range(restarts):\n        rx = np.random.uniform(bounds[0], bounds[1])\n        ry = np.random.uniform(bounds[0], bounds[1])\n        # Try both a global random restart and a local perturbation from current best\n        bx1, by1, bv1 = anneal_once(rx, ry, iterations, bounds)\n        bx2, by2, bv2 = anneal_once(\n            np.clip(best_x + np.random.normal(0, 1), bounds[0], bounds[1]),\n            np.clip(best_y + np.random.normal(0, 1), bounds[0], bounds[1]),\n            iterations, bounds)\n        candidates = [(best_x, best_y, best_value), (bx1, by1, bv1), (bx2, by2, bv2)]\n        best_x, best_y, best_value = min(candidates, key=lambda t: t[2])\n\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "39d3c5b7-a779-4a2c-888b-13bc4ffc8966", "generation": 3, "timestamp": 1747683944.4701865, "metrics": {"runs_successfully": 1.0, "value": -1.5186785500296518, "distance": 1.7066254910560772, "value_score": 0.6307868981516045, "distance_score": 0.36946374860668946, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 52 lines with 72 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.4470917790682061, "distance": 2.1481463061683357, "value_score": 0.4301064327373378, "distance_score": 0.2388252066022703, "overall_score": 0.4859422843246168, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.42971142162308373, "success_rate": 1.0}}}