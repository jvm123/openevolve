{"id": "8715ee97-7152-488f-b085-9a0a7731120d", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_cooling_rate = 0.95  # Adjusted for more gradual cooling\n    cooling_rate = initial_cooling_rate\n    min_temperature = 1e-6  # Lower minimum temperature for finer search\n    stagnation_limit = 100  # More frequent stagnation checks for quicker response\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Dynamic perturbation scale based on distance from best known point\n        distance_to_best = np.sqrt((current_x - best_x)**2 + (current_y - best_y)**2)\n        perturbation_scale = max(0.1 * temperature, distance_to_best * 0.2 * np.log(iterations / (_ + 1)))\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Implement a more dynamic restart mechanism\n        if _ % stagnation_limit == 0:\n            # If stagnation detected, restart with a broader exploration\n            current_x = np.random.uniform(bounds[0], bounds[1])\n            current_y = np.random.uniform(bounds[0], bounds[1])\n            current_value = evaluate_function(current_x, current_y)\n            temperature = 1.0  # Reheat the system\n        else:\n            # Introduce adaptive perturbations to escape local minima\n            current_x += np.random.uniform(-0.2, 0.2) * (temperature / initial_cooling_rate)\n            current_y += np.random.uniform(-0.2, 0.2) * (temperature / initial_cooling_rate)\n            current_value = evaluate_function(current_x, current_y)\n\n        # Cool down the temperature based on progress\n        if _ % 10 == 0 and current_value < best_value:\n            cooling_rate *= 1.1  # Slightly increase cooling rate to consolidate gains\n        temperature = max(temperature * cooling_rate, min_temperature)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "1576f604-4dd5-4b3f-88d8-29fff3a87f55", "generation": 6, "timestamp": 1747684448.345473, "metrics": {"runs_successfully": 1.0, "value": -1.5097189569858607, "distance": 1.646692597512056, "value_score": 0.6272419811938585, "distance_score": 0.37783005134031056, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 4 lines with 4 lines\nChange 2: 'perturbation_scale = max(0.1 * temperature, distance_to_best * 0.1 * (temperature / initial_cooling_rate))' to 'perturbation_scale = max(0.1 * temperature, distance_to_best * 0.2 * np.log(iterations / (_ + 1)))'\nChange 3: Replace 16 lines with 17 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.1598740927883568, "distance": 2.8909901674767875, "value_score": 0.5837332585478398, "distance_score": 0.24153648181166762, "overall_score": 0.5045401799344409, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.5227008996722041, "success_rate": 1.0}}}