{"id": "2c47e181-1004-4279-9476-50f166783cce", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points\n    num_initial_points = 5\n    best_x, best_y, best_value = None, None, float('inf')\n    \n    for _ in range(num_initial_points):\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        \n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_cooling_rate = 0.995\n    cooling_rate = initial_cooling_rate\n    min_temperature = 1e-5  # Lower minimum temperature for finer search\n    no_improvement_count = 0\n    stagnation_limit = 200  # Iterations before considering stagnation\n\n    for i in range(iterations):\n        # Adaptive perturbation based on temperature and distance to the best\n        distance_to_best = np.sqrt((current_x - best_x)**2 + (current_y - best_y)**2)\n        perturbation_scale = max(0.1, temperature * (1 + distance_to_best * 0.1))\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n\n        # Ensure new points are within bounds\n        new_x = np.clip(new_x, bounds[0], bounds[1])\n        new_y = np.clip(new_y, bounds[0], bounds[1])\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution and track improvements\n        no_improvement_count += 1\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n            no_improvement_count = 0\n\n        # Cool down the temperature\n        # Implement a restart mechanism if no improvement is found in a certain number of iterations\n        # Check for stagnation and adapt cooling rate\n        if no_improvement_count >= stagnation_limit:\n            # Restart with a new random position\n            current_x = np.random.uniform(bounds[0], bounds[1])\n            current_y = np.random.uniform(bounds[0], bounds[1])\n            current_value = evaluate_function(current_x, current_y)\n            no_improvement_count = 0\n            temperature = 1.0  # Reset temperature\n            if current_value >= best_value:\n                cooling_rate = max(cooling_rate * 0.95, 0.8 * initial_cooling_rate)  # More exploration\n            else:\n                cooling_rate = min(cooling_rate * 1.05, 1.0)  # Faster convergence\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "7848162a-6e28-4748-994f-25407570d2b5", "generation": 6, "timestamp": 1747684298.5852404, "metrics": {"runs_successfully": 1.0, "value": -1.5181036398848708, "distance": 1.7275651375953733, "value_score": 0.6305582288664843, "distance_score": 0.3666273579378573, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace min_temperature = 1e-5  # Lower minimum temperature for finer search with 2 lines\nChange 2: 'for _ in range(iterations):' to 'for i in range(iterations):'\nChange 3: Replace 6 lines with 9 lines\nChange 4: Replace # Accept the new solution with 2 lines\nChange 5: Replace 3 lines with 3 lines\nChange 6: Replace if _ % stagnation_limit == 0: with 7 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.1638492058383314, "distance": 2.871764729568233, "value_score": 0.531317094533157, "distance_score": 0.21719792593382894, "overall_score": 0.1767899269000086, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.48394963450004286, "success_rate": 1.0}}}