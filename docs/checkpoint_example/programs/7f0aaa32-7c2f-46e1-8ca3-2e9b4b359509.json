{"id": "7f0aaa32-7c2f-46e1-8ca3-2e9b4b359509", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    initial_cooling_rate = 0.995  # Adjust initial cooling rate for better exploration-exploitation balance\n    adaptive_cooling_rate = initial_cooling_rate\n    min_temperature = 1e-6  # Even lower minimum temperature for finer search\n    stagnation_limit = 100  # More frequent checks for stagnation\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        # Dynamic perturbation scale based on distance from best known point\n        distance_to_best = np.sqrt((current_x - best_x)**2 + (current_y - best_y)**2)\n        perturbation_scale = max(0.1 * temperature, distance_to_best * temperature)\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Implement a more frequent restart mechanism if no improvement is found\n        # Adaptive cooling rate adjustment based on iteration and improvement\n        if new_value < best_value:\n            adaptive_cooling_rate *= 0.995  # Encourage more exploitation when improving\n        else:\n            adaptive_cooling_rate *= 1.002  # Encourage exploration when stuck\n\n        # Implement a more diverse restart strategy\n        if _ % (stagnation_limit + np.random.randint(20)) == 0 and current_value >= best_value:\n            # Diverse random restart with consideration of historical best\n            current_x = best_x + np.random.uniform(-1, 1)\n            current_y = best_y + np.random.uniform(-1, 1)\n            current_value = evaluate_function(current_x, current_y)\n            adaptive_cooling_rate = initial_cooling_rate  # Reset cooling rate for new start\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "7e837bb2-f97e-47b8-98cd-82d28c4fe891", "generation": 6, "timestamp": 1747684673.6506736, "metrics": {"error": 0.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 2 lines\nChange 2: 'perturbation_scale = max(0.1 * temperature, distance_to_best * 0.1)' to 'perturbation_scale = max(0.1 * temperature, distance_to_best * temperature)'\nChange 3: Replace 6 lines with 13 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.8927860597767923, "distance": 4.616838806467545, "value_score": 0.4958889373125321, "distance_score": 0.22352815010716592, "overall_score": 0.1729183614839338, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.464591807419669, "success_rate": 1.0}}}