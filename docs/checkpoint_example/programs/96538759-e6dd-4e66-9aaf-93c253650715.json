{"id": "96538759-e6dd-4e66-9aaf-93c253650715", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    current_x = np.random.uniform(bounds[0], bounds[1])\n    current_y = np.random.uniform(bounds[0], bounds[1])\n    current_value = evaluate_function(current_x, current_y)\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.998  # Slow down cooling to enhance exploration\n    min_temperature = 1e-4  # Lower minimum temperature for extended exploration\n\n    best_values = []\n    for _ in range(iterations):\n        if _ % 50 == 0:\n            best_values.append(best_value)\n        # Use historical best values to guide new candidates if needed\n        if len(best_values) > 5 and _ % 200 == 0:\n            candidate_value = min(best_values)\n            if candidate_value < best_value:\n                best_value = candidate_value\n                idx = best_values.index(best_value)\n                current_x, current_y = best_x, best_y\n        # Generate a new candidate point by adding a small perturbation\n        progress_factor = (_ / iterations) ** 0.5  # Adaptive scaling with iteration progress\n        perturbation_scale = max(0.1 * temperature * (1 - progress_factor), 0.01)\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Implement a restart mechanism if no improvement is found in a certain number of iterations\n        # Improved restart mechanism: use best found solutions to guide\n        if _ % 100 == 0 and current_value >= best_value:\n            temperature = 1.0  # Reset temperature to initial value for a fresh start\n            # Introduce randomness to avoid cycling over the same local minima\n            best_x, best_y = np.random.uniform(bounds[0], bounds[1]), np.random.uniform(bounds[0], bounds[1])\n            current_x = best_x + np.random.normal(0, 1)  # Normal distribution for broader exploration\n            current_y = best_y + np.random.normal(0, 1)\n            current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "9d29a7d6-9ffb-4a30-b9f9-f3cb8497870d", "generation": 4, "timestamp": 1747684378.6740701, "metrics": {"runs_successfully": 1.0, "value": -0.8038628044982474, "distance": 3.777583688551058, "value_score": 0.44793697740459426, "distance_score": 0.1715387091046857, "overall_score": 0.16404475983483247, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.42022379917416225, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace perturbation_scale = max(0.1 * temperature, 0.01)  # Scale perturbation with temperature with 2 lines\nChange 2: Replace 5 lines with 7 lines\nChange 3: Replace for _ in range(iterations): with 11 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -0.5337431657486318, "distance": 2.8885753563887886, "value_score": 0.5446017074532435, "distance_score": 0.3197271907925064, "overall_score": 0.5045358363419397, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.5226791817096981, "success_rate": 1.0}}}