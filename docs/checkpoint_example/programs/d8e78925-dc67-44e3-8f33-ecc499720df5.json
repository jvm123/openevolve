{"id": "d8e78925-dc67-44e3-8f33-ecc499720df5", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved global search algorithm combining Simulated Annealing and Differential Evolution ideas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Use a population of candidate solutions for diversity\n    pop_size = 10\n    stagnation_limit = 100\n    min_temperature = 1e-6\n\n    population = []\n    for _ in range(pop_size):\n        x = np.random.uniform(bounds[0], bounds[1])\n        y = np.random.uniform(bounds[0], bounds[1])\n        val = evaluate_function(x, y)\n        population.append((x, y, val))\n    # Find initial best\n    population.sort(key=lambda tup: tup[2])\n    best_x, best_y, best_value = population[0]\n    best_iteration = 0\n\n    # Annealing schedule\n    temperature = 2.0\n    cooling_rate = 0.992\n\n    for it in range(iterations):\n        for i in range(pop_size):\n            x0, y0, v0 = population[i]\n            # Differential Evolution-style mutation with random others\n            idxs = list(range(pop_size))\n            idxs.remove(i)\n            a, b, c = population[np.random.choice(idxs)], population[np.random.choice(idxs)], population[np.random.choice(idxs)]\n            F = 0.8\n            mutant_x = np.clip(a[0] + F * (b[0] - c[0]), bounds[0], bounds[1])\n            mutant_y = np.clip(a[1] + F * (b[1] - c[1]), bounds[0], bounds[1])\n\n            # Simulated Annealing-style local perturbation\n            perturb = np.random.normal(0, max(0.1, temperature/2), size=2)\n            trial_x = np.clip(mutant_x + perturb[0], bounds[0], bounds[1])\n            trial_y = np.clip(mutant_y + perturb[1], bounds[0], bounds[1])\n            trial_value = evaluate_function(trial_x, trial_y)\n\n            # Acceptance rule: always accept improvements, otherwise Metropolis\n            if trial_value < v0 or np.exp((v0 - trial_value) / max(temperature, 1e-10)) > np.random.rand():\n                population[i] = (trial_x, trial_y, trial_value)\n                # Update best\n                if trial_value < best_value:\n                    best_x, best_y, best_value = trial_x, trial_y, trial_value\n                    best_iteration = it\n\n        temperature = max(temperature * cooling_rate, min_temperature)\n        # Occasional population re-seeding to escape stagnation\n        if it - best_iteration > stagnation_limit:\n            # Re-seed worst half of population randomly\n            for j in range(pop_size//2, pop_size):\n                x = np.random.uniform(bounds[0], bounds[1])\n                y = np.random.uniform(bounds[0], bounds[1])\n                v = evaluate_function(x, y)\n                population[j] = (x, y, v)\n            # Re-sort\n            population.sort(key=lambda tup: tup[2])\n            best_x, best_y, best_value = population[0]\n            best_iteration = it\n\n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "7848162a-6e28-4748-994f-25407570d2b5", "generation": 6, "timestamp": 1747684545.4441178, "metrics": {"runs_successfully": 1.0, "value": -1.5186705060681758, "distance": 1.7056329935562686, "value_score": 0.630783697539033, "distance_score": 0.36959927764837225, "overall_score": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 63 lines with 71 lines", "parent_metrics": {"runs_successfully": 1.0, "value": -1.1638492058383314, "distance": 2.871764729568233, "value_score": 0.531317094533157, "distance_score": 0.21719792593382894, "overall_score": 0.1767899269000086, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.48394963450004286, "success_rate": 1.0}}}