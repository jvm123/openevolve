{"id": "cbace538-30c1-4370-8ee7-46e2dd00371c", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm using simulated annealing to escape local minima.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Random restart function to initialize a new search point\n    def random_restart():\n        return (np.random.uniform(bounds[0], bounds[1]), \n                np.random.uniform(bounds[0], bounds[1]), \n                float('inf'))  # Start with a high value to ensure any real evaluation is better\n\n    # Initialize with a random point\n    current_x, current_y, current_value = random_restart()\n    \n    best_x, best_y, best_value = current_x, current_y, current_value\n    temperature = 1.0\n    cooling_rate = 0.99  # Adjust cooling rate for better exploration\n    min_temperature = 1e-3\n    no_improvement_threshold = 200  # Number of iterations to trigger a restart\n    last_improvement_iteration = 0  # Track the last improvement\n\n    for _ in range(iterations):\n        # Generate a new candidate point by adding a small perturbation\n        perturbation_scale = max(0.1 * temperature, 0.05)  # Adjusted to allow broader exploration\n        new_x = current_x + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_y = current_y + np.random.uniform(-perturbation_scale, perturbation_scale)\n        new_value = evaluate_function(new_x, new_y)\n\n        # Calculate acceptance probability\n        if new_value < current_value:\n            accept = True\n        else:\n            accept = np.exp((current_value - new_value) / temperature) > np.random.rand()\n        \n        # Accept the new solution\n        if accept:\n            current_x, current_y, current_value = new_x, new_y, new_value\n\n        # Update the best solution found\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Cool down the temperature\n        # Check for improvement\n        if current_value < best_value:\n            last_improvement_iteration = _  # Update last improvement\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n        # Restart if no improvement\n        if _ - last_improvement_iteration > no_improvement_threshold:\n            current_x, current_y, current_value = random_restart()\n            last_improvement_iteration = _  # Reset improvement tracker\n\n        # Perform a local search step after a restart\n        if _ % no_improvement_threshold == 0:\n            gradient_step = 0.01  # Small step for local search\n            grad_x = np.cos(current_x) * np.cos(current_y) + current_y * np.cos(current_x * current_y) + current_x / 10\n            grad_y = -np.sin(current_x) * np.sin(current_y) + current_x * np.cos(current_x * current_y) + current_y / 10\n            current_x -= gradient_step * grad_x\n            current_y -= gradient_step * grad_y\n            current_value = evaluate_function(current_x, current_y)\n        \n        temperature = max(temperature * cooling_rate, min_temperature)\n    \n    return best_x, best_y, best_value\n\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x*y) + (x**2 + y**2)/20\n# EVOLVE-BLOCK-END\n\n# This part remains fixed (not evolved)\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n    # The global minimum is around (-1.76, -1.03) with value -2.104\n", "language": "python", "parent_id": "4f47720f-4f9d-43e1-b1f1-1eda6708c5e3", "generation": 5, "timestamp": 1747683527.8151245, "metrics": {"runs_successfully": 1.0, "value": -1.1505276454007851, "distance": 2.8298516401660767, "value_score": 0.5421676042939461, "distance_score": 0.2559468909629838, "overall_score": 0.5004169259730527, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.5020846298652628, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 2 lines\nChange 2: 'perturbation_scale = max(0.1 * temperature, 0.05)  # Adjusted to allow broader exploration' to 'perturbation_scale = max(0.2 * temperature, 0.01)  # Increased initial scale for broader exploration'\nChange 3: Replace 2 lines with 2 lines", "parent_metrics": {"error": 0.0}}}